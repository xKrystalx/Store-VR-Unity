<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Debug.Editor</name>
    </assembly>
    <members>
        <member name="T:Sisus.Debugging.ChannelEnabled">
             <summary>
             Specifies options related to log channel enabledness.
             </summary>
            </member>
        <member name="T:Sisus.Debugging.Channels">
             <summary>
             Represents a collection of <see cref="T:Sisus.Debugging.Channels.ChannelData" /> and offers a number of methods and properties to get information about the channels or modify them.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Channels.EnableChannel(System.String)">
             <summary>
             Enables logging of messages on the given <paramref name="channelName">channel</paramref>.
             </summary>
             <param name="channelName"> Name of the channel to enable. </param>
            </member>
        <member name="M:Sisus.Debugging.Channels.EnableChannel(Sisus.Debugging.Channels.ChannelData)">
             <summary>
             Enables logging of messages on the given <paramref name="channel" />.
             </summary>
             <param name="channel"> Data for the channel to enable. </param>
            </member>
        <member name="M:Sisus.Debugging.Channels.DisableChannel(System.String)">
             <summary>
             Disables logging of messages on the given <paramref name="channelName">channel</paramref>.
             </summary>
             <param name="channelName"> Name of the channel to disable. </param>
            </member>
        <member name="M:Sisus.Debugging.Channels.DisableChannel(Sisus.Debugging.Channels.ChannelData)">
             <summary>
             Disables logging of messages on the given <paramref name="channel" />.
             </summary>
             <param name="channel"> Data for the channel to disable. </param>
            </member>
        <member name="M:Sisus.Debugging.Channels.RegisterChannel(System.String)">
             <summary>
             Adds the given <paramref name="channel" /> to the collection and selects a color that will be used for the channel prefix in logged messages.
             </summary>
             <param name="channel"> Name of the channel to register. </param>
            </member>
        <member name="T:Sisus.Debugging.Critical">
             <summary>
             Utility class containing Debugging methods similar to the <see cref="T:Sisus.Debugging.Debug" /> class, with three main differences:
             1. The messages use a larger font in the console window.
             2. They always include stack trace even if they have been disabled for normal messages in Player Settings.
             3. The messages are always recorded in builds, even if "Use Player Log" is disabled in Player Settings.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Critical.Log(System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console.
             <para>
             The message uses a larger font in the console window and always includes stack trace information.
             The message will also always be recorded in builds, even if "Use Player Log" is disabled in Player Settings.
             </para>
             </summary>
             <param name="message"> <see cref="T:System.Object" /> to be converted to <see cref="T:System.String" /> representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Critical.Ensure(System.Boolean,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />
             and returns <see langword="true" /> if <paramref name="condition" /> was <see langword="true" /> or <see langword="false" /> if it was not.
             <example>
             <code>
             float Divide(float dividend, float divisor)
             {
            		return Critical.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Critical.Ensure(System.Int32,System.Boolean,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />
             and returns <see langword="true" /> if <paramref name="condition" /> was <see langword="true" /> or <see langword="false" /> if it was not.
             <example>
             <code>
             float Divide(float dividend, float divisor)
             {
            		return Critical.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>		
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Critical.Guard(System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Critical.Guard(System.Int32,System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Critical.Guard``1(System.Boolean,System.Object[])-->
        <member name="M:Sisus.Debugging.Critical.LogCriticalToFile(System.String,System.String)">
             <summary>
             Logs critical message to Player.log file with CRITICAL!!! prefix and with stack trace included.
             </summary>
            </member>
        <member name="T:Sisus.Debugging.Debug">
            
            
             * \nosubgrouping
              <summary>
             Extended version of the built-in Debug class with additional methods to ease debugging while developing a game.
             </summary>
            </member>
        <member name="P:Sisus.Debugging.Debug.UsePlayerLog">
            
            
                 * @name Static Properties
                 @{
             <summary>
             Reports whether messages logged using the <see cref="T:Sisus.Debugging.Debug" /> class are being recorded to a log file.
             <para>
             If this is <see langword="false" /> then only messages logged using the <see cref="T:Sisus.Debugging.Critical" /> class or
             messages written to log files manually using LogToFile will be recorded.
             </para>
             </summary>
            </member>
        <member name="P:Sisus.Debugging.Debug.developerConsoleVisible">
             <summary>
             Reports whether the development Console is visible.
             </summary>
            </member>
        <member name="P:Sisus.Debugging.Debug.isDebugBuild">
             <summary>
             In the Build Settings dialog there is a check box called "Development Build".
             <para>
             If it is checked <see cref="P:Sisus.Debugging.Debug.isDebugBuild" /> will be <see langword="true" />. In the editor isDebugBuild always returns <see langword="true" />.
             </para>
             <para>
             When "Strip Log Calls From Builds" is checked in Project Settings for Console, then logging done using the <see cref="T:Sisus.Debugging.Debug" /> class will be stripped from non-development builds.
             </para>
             <para>
             Additionally logging done using the <see cref="T:Sisus.Debugging.Dev" /> class will always be stripped from non-development builds, regardless of whether or not "Strip Log Calls From Builds" is checked.
             </para>
             <para>
             Logging done using the <see cref="T:Sisus.Debugging.Critical" /> class will always be recorded even in non-development builds, regardless of whether or not "Strip Log Calls From Builds" is checked.
             </para>
             </summary>
            </member>
        <member name="P:Sisus.Debugging.Debug.unityLogger">
             <summary>
             Gets the default debug logger used internally for logging all messages.
             </summary>
            </member>
        <member name="P:Sisus.Debugging.Debug.Null">
            @}
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Object)">
            
            
                 * @name Log - Logs a message to the Console
                 @{
             <summary>
             Logs a <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console on the given <paramref name="channel" />.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log(Channel.Audio, "Playing {audioId} in {delay} seconds.", this);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Int32,System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console on the given channels.
             <example>
             <code>
             public IEnumerator PlaySoundEffect(float delay, AudioId audioId)
             {
             	Debug.Log(Channel.Audio, Channel.Sfx, "Playing {audioId} in {delay} seconds.", this);
             	
             	yield return new WaitForSeconds(delay);
             	
             	audioController.Play(audioId);
             }
             </code>
             </example>
             </summary>
             <param name="channel1"> The first channel to which the message belongs. </param>
             <param name="channel2"> The second channel to which the message belongs. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String)">
             <summary>
             Logs a <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console on the given <paramref name="channel" />.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <example>
             <code>
             void LogAudioEvent(string message)
             {
             	Debug.Log(Channel.Audio, message, this);
             }
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console on the given channels.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <example>
             <code>
             void LogSfxEvent(string message)
             {
             	Debug.Log(Channel.Audio, Channel.Sfx, message, this);
             }
             </code>
             </example>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String,System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Logs a message to the Console along with method signature on the second line to provide additional context.
             <para>
             If the method belongs to a <see cref="T:UnityEngine.Object" /> context information will be automatically added to the message.
             </para>
             <example>
             <code>
             public void DestroyIfNotNull(Object target)
             {
            		if(target == null)
            		{
            			return;
            		}
            
             	Debug.Log("Destroying target.", ()=&gt;Destroy(target));
            
             	Object.Destroy(target);
             }
             </code>
             </example>
             </summary>
             <param name="message"> Message to display. </param>
             <param name="methodContext"> Expression pointing to a method to which the message relates. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Logs to the Console the name and value of <paramref name="classMember">class member</paramref> along with method signature on the second line to provide additional context.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		
            		Debug.Log(()=&gt;activePage, ()=&gt;SetActivePage(value));
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="methodContext"> Expression pointing to a method to which the message relates. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs to the Console the name and value of <paramref name="classMember">a class member</paramref>.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		
            		Debug.Log(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs to the Console on the given <paramref name="channel" /> the name and value of <paramref name="classMember">a class member</paramref>.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		
            		Debug.Log(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs a message to the Console consisting of a <paramref name="prefix">text string</paramref> followed by the names and values of
             <paramref name="classMembers">zero or more class members</paramref>.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log("[Audio] Playing delayed - ", ()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(soundId);
            	}
             </code>
             </example>
             </summary>
             <param name="prefix"> Prefix text for the message. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String[])">
             <summary>
             Logs a message to the Console formed by joining the given text strings together.
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String,System.String,System.String[])">
             <summary>
             Logs a message to the Console formed by joining the given text strings together.
             </summary>
             <param name="messagePart1"> First part of the message. </param>
             <param name="messagePart2"> Second part of the message. </param>
             <param name="messageParts"> Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Object,System.Object,System.Object[])">
             <summary>
             Logs a message to the Console listing a number of elements separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.String,System.Object,System.Object[])">
             <summary>
             Logs a message to the Console consisting of a <paramref name="prefix">text string</paramref> followed
             by the values of <paramref name="args">zero or more objects</paramref> separated by a separator character.
             <para>
             A comma will be used for the separator character with shorter messages and a line break with longer messages.
             </para>
             <example>
             <code>
             public void TestLog123()
             {
            		Debug.Log("Test: ", 1, 2, 3);
            	}
             </code>
             </example>
             </summary>
             <param name="prefix"> Prefix text for the message. </param>
             <param name="arg"> First listed element after the prefix. </param>
             <param name="args"> (Optional) Additional listed elements after the prefix. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(UnityEngine.Object,System.String,System.String,System.String[])">
             <summary>
             Logs a message to the Console consisting of multiple parts joined together.
             </summary>
             <param name="part1"> First part of the message. </param>
             <param name="part2"> Second part of the message. </param>
             <param name="parts"> (Optional) Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs to the Console the name and value of one or more <paramref name="classMembers">class members</paramref> separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs to the Console on the given <paramref name="channel" /> the name and value of zero or more <paramref name="classMembers">class members</paramref> separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> <see cref="!:Channel" /> to which the message belongs. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Log(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs the name and value of one or more class members to the Console separated by a separator character using the given channels.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat(System.String,System.Object[])">
            @}
            
            
                 * @name Log Format - Insert values into a message and log it to the Console
                 @{
             <summary>
             Logs a message to the Console formed by inserting the values of <paramref name="args">zero or more objects</paramref> into a <paramref name="format">text string</paramref>.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.Log("Playing {0} in {1} seconds.", audioId, delay);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" /> string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat(UnityEngine.Object,System.String,System.Object[])">
             <summary>
             Logs a message to the Console formed by inserting the values of <paramref name="args">zero or more objects</paramref> into a <paramref name="format">text string</paramref>.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogFormat(this, "Playing {0} in {1} seconds.", audioId, delay);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" /> string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat(System.Int32,System.String,System.Object[])">
             <summary>
             Logs a message to the Console on the given <paramref name="channel" />, formed by inserting the values of <paramref name="args">zero or more objects</paramref>
             into a <paramref name="format">text string</paramref>.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogFormat(Channel.Audio, "Playing {0} in {1} seconds.", audioId, delay);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" />
             string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat(System.Int32,System.Int32,System.String,System.Object[])">
             <summary>
             Logs a message to the Console on the given channels, formed by inserting the values of <paramref name="args">zero or more objects</paramref>
             into a <paramref name="format">text string</paramref>.
             <example>
             <code>
             public IEnumerator PlaySoundEffect(float delay, AudioId audioId)
             {
            		Debug.Log(Channel.Audio, Channel.Sfx, "Playing {0} in {1} seconds.", audioId, delay);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> The first channel to which the message belongs. </param>
             <param name="channel2"> The second channel to which the message belongs. </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" />
             string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat(System.Int32,System.Int32,UnityEngine.Object,System.String,System.Object[])">
             <summary>
             Logs a message to the Console on the given channels, formed by inserting the values of <paramref name="args">zero or more objects</paramref>
             into a <paramref name="format">text string</paramref>.
             <example>
             <code>
             public IEnumerator PlaySoundEffect(float delay, AudioId audioId)
             {
            		Debug.Log(Channel.Audio, Channel.Sfx, "Playing {0} in {1} seconds.", audioId, delay);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> The first channel to which the message belongs. </param>
             <param name="channel2"> The second channel to which the message belongs. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" />
             string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat``1(UnityEngine.LogType,``0,UnityEngine.Object,System.String,System.Object[])">
             <summary>
             Logs a message to the Console formed by inserting the values of <paramref name="args">zero or more objects</paramref> into a <paramref name="format">text string</paramref>.
             </summary>
             <param name="logType"> Type of the message; Log, Warning, Error, Assert or Exception. </param>
             <param name="logOptions"> Option flags for specifying special treatment of a log message. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" /> string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogFormat``1(System.Int32,System.Int32,UnityEngine.LogType,``0,UnityEngine.Object,System.String,System.Object[])">
             <summary>
             Logs a message to the Console on the given channels, formed by inserting the values of <paramref name="args">zero or more objects</paramref>
             into a <paramref name="format">text string</paramref>.
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>	
             <param name="logType"> Type of the message; Log, Warning, Error, Assert or Exception. </param>
             <param name="logOptions"> Option flags for specifying special treatment of a log message. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" />
             string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogState(System.Object,System.Reflection.BindingFlags)">
            @}
            
            
                 * @name Log State - Logs to the Console the name and value of every field and property of the target object
                 @{
             <summary>
             Logs to the Console the name and value of every field and property of <paramref name="target" /> matched using the specified <paramref name="flags" />.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             </summary>
             <param name="target"> <see cref="T:System.Object" /> instance whose class members are to be listed. </param>
             <param name="flags">
             <see cref="T:System.Reflection.BindingFlags" /> used when searching for the members.
             <para>
             By default only public and non-inherited instance members are listed.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogState(System.Object,System.Boolean,System.Boolean)">
             <summary>
             Logs to the Console the name and value of every field and property of <paramref name="target" /> matched using the specified settings.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             </summary>
             <param name="target"> <see cref="T:System.Object" /> instance whose members are to be listed. </param>
             <param name="includePrivate"> If <see langword="false" /> then only public members will be listed; otherwise, non-public members will also be listed. </param>
             <param name="includeStatic"> If <see langword="false" /> then only instance members will be listed; otherwise, static members will also be listed. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogState(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Logs to the Console the name and value of every static field and property of <paramref name="classType" /> matched using the specified <paramref name="flags" />.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             </summary>
             <param name="classType"> <see cref="T:System.Type" /> of the class whose members are to be listed. </param>
             <param name="flags">
             <see cref="T:System.Reflection.BindingFlags" /> used when searching for the members.
             <para>
             By default only public and non-inherited static members are listed.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogIf(System.Boolean,System.String,UnityEngine.Object)">
            @}
            
            
                 * @name Log If - Logs a message to the Console only if a condition is true
                 @{
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs a <paramref name="message" /> to the Console.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogIf(System.Int32,System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs to the Console on the given <paramref name="channel" />
             a <paramref name="message" />.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogIf(System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs to the Console on the given <paramref name="channel" />
             the name and value of <paramref name="classMember">a class member</paramref>.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogLarge(System.String,UnityEngine.Object)">
            @}
            
            
                 * @name Log Large - Logs a message to the Console using a large font size
                 @{
             <summary>
             Logs a <paramref name="message" /> to the Console using a large font size.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogLarge(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console using a large font size and the given channel.
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogLarge(System.Int32,System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the Console using a large font size and the given channels.
             </summary>
             <param name="channel1"> The first channel to which the message belongs. </param>
             <param name="channel2"> The second channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogToFile(System.String,System.String,Sisus.Debugging.ClearFile)">
            @}
            
            
                 * @name Log To File - Logs a message to a file
                 @{
             <summary>
             Appends a message to the end of the log file.
             <para>
             Note that calls to this method will function even in release builds with build stripping enabled.
             As such it is possible to use this method to log some critical messages manually even if otherwise
             all logging has been disabled across the project.
             </para>
             </summary>
             <param name="message"> Message to add to the log file. </param>
             <param name="logFilePath"> Path to the log file to which the message should be added. </param>
             <param name="clearFile">
             <list type="number">
             <item>
             <description>
             <see cref="F:Sisus.Debugging.ClearFile.OnSessionStart" /> : The log file is cleared before the <paramref name="message" /> is written to it
             if this is the first time during this session that <see cref="M:Sisus.Debugging.Debug.LogToFile(System.String,System.String,Sisus.Debugging.ClearFile)" /> is called for this <paramref name="logFilePath">file path</paramref>.
             </description>
             </item>
             <item>
             <description>
             <see cref="F:Sisus.Debugging.ClearFile.Now" /> : The log file is cleared now before the message is written to it.
             <para>
             This might be an useful if you have a log file dedicated to holding only one type of information like system information or performance metrics,
             and you want to write all the information at once to the log file, replacing its old contents entirely with each call.
             </para>
             </description>
             </item>
             <item>
             <description>
             <see cref="F:Sisus.Debugging.ClearFile.Never" /> : This method call will never clear the log file.
             <para> Note that with this option the log file will continue growing larger with each call of this method until it is manually cleared by calling <see cref="M:Sisus.Debugging.Debug.ClearLogFile(System.String,System.Boolean)" />.
             </para>
             </description>
             </item>
             </list>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.ClearLogFile(System.String,System.Boolean)">
             <summary>
             Deletes existing log file at the given path created by a <see cref="M:Sisus.Debugging.Debug.LogToFile(System.String,System.String,Sisus.Debugging.ClearFile)" /> call if one exists.
             </summary>
             <param name="path"> Path to the log file. </param>
             <param name="backupExisting"> If <see langword="true" /> a backup is created of the log file before it is deleted, if one is found. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogChanges(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            @}
            
            
                 * @name Log Changes - Logs to the Console the name and value of a class member any time its value is changed
                 @{
             <summary>
             Logs to the Console the name and value of <paramref name="classMember" /> any time its value is changed.
             <para>
             This will continue happening until <see cref="M:Sisus.Debugging.Debug.CancelLogChanges(System.Reflection.MemberInfo)" /> is called with an
             expression pointing to the same class member.
             </para>
             <para>
             At runtime logging takes place at the end of each frame.
             </para>
             </summary>
             <param name="classMember"> Expression pointing to the class member to track. </param>
             <param name="pauseOnChanged"> If <see langword="true" />
             then the editor will be paused whenever the value of the class member changes; otherwise, editor will not be paused.
             <para>
             In builds this parameter will have no effect; the application will not be paused regardless of its value.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogChanges(System.Object,System.Reflection.MemberInfo,System.Boolean)">
             <summary>
             Logs to the Console the name and value of <paramref name="classMember" /> any time its value is changed.
             <para>
             This will continue happening until <see cref="M:Sisus.Debugging.Debug.CancelLogChanges(System.Reflection.MemberInfo)" /> is called with an
             expression pointing to the same class member.
             </para>
             <para>
             At runtime logging takes place at the end of each frame.
             </para>
             </summary>
             <param name="memberOwner">
             Instance of the class that contains the member and from which the value of the member is read.
             <para>
             This can be <see langword="null" /> if the <see cref="T:System.Reflection.MemberInfo" /> represents a static member.
             </para>
             </param>
             <param name="classMember">
             <see cref="T:System.Reflection.MemberInfo" /> representing the class member to track.
             </param>
             <param name="pauseOnChanged"> If <see langword="true" />
             then the editor will be paused whenever the value of the class member changes; otherwise, editor will not be paused.
             <para>
             In builds this parameter will have no effect; the application will not be paused regardless of its value.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelLogChanges(System.Linq.Expressions.Expression{System.Func{System.Object}})">
             <summary>
             Stop logging to the Console any time the value of <paramref name="classMember" /> changes.
             </summary>
             <param name="classMember"> Expression pointing to a class member that is being tracked. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelLogChanges(System.Reflection.MemberInfo)">
             <summary>
             Stop logging to the Console any time the value of <paramref name="classMember" /> changes.
             </summary>
             <param name="classMember"> Expression pointing to a class member that is being tracked. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.ClearTrackedValues">
             <summary>
             Clears all value trackers that have been enabled using <see cref="M:Sisus.Debugging.Debug.LogChanges(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)" />.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Object)">
            @}
            
            
                 * @name Log Warning - Logs a warning message to the Console
                 @{
             <summary>
             Logs a warning <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Object,UnityEngine.Object)">
             <summary>
             Logs a warning <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.String)">
             <summary>
             Logs a warning <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.String,UnityEngine.Object)">
             <summary>
             Logs a warning <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a warning <paramref name="message" /> to the Console on the given <paramref name="channel" />.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Int32,System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a warning <paramref name="message" /> to the Console on the given channels.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>	
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Object,System.Object,System.Object[])">
             <summary>
             Logs a warning message to the Console listing a number of elements separated by a separator character.
             
             With shorter messages a comma will be used for the separator character, and with longer message a line break will be used.
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.String,System.Object,System.Object[])">
             <summary>
             Logs a warning message to the Console consisting of a <paramref name="prefix">text string</paramref> followed by the names and values of
             <paramref name="classMembers">zero or more class members</paramref>.
             <para>
             A comma will be used for the separator character with shorter messages and a line break with longer messages.
             </para>
             <example>
             <code>
             public void TestLogWarning123()
             {
            		Debug.LogWarning("Test: ", 1, 2, 3);
            	}
             </code>
             </example>
             </summary>
             <param name="prefix"> Prefix text for the message. </param>
             <param name="arg"> First listed element after the prefix. </param>
             <param name="args"> Additional listed elements after the prefix. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(UnityEngine.Object,System.String,System.String,System.String[])">
             <summary>
             Logs a warning message to the Console consisting of multiple parts joined together.
             </summary>
             <param name="part1"> First part of the message. </param>
             <param name="part2"> Second part of the message. </param>
             <param name="parts"> (Optional) Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs a warning message to the Console consisting of the name and value of one or more class members separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogWarning(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs a warning message consisting of the name and value of a class member to the Console.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		Debug.LogWarning(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs a warning message to the Console on the given <paramref name="channel" /> and consisting of the name and value of a class member.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		Debug.LogWarning(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs a warning message consisting of the name and value of a class member to the Console.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		Debug.LogWarning(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> The first channel to which the message belongs. </param>
             <param name="channel2"> The second channel to which the message belongs. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarning(System.String,System.Linq.Expressions.Expression{System.Func{System.Object}}[])-->
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.String,System.String,System.String[])">
             <summary>
             Logs a warning message to the Console formed by joining the given text strings together.
             </summary>
             <param name="messagePart1"> First part of the message. </param>
             <param name="messagePart2"> Second part of the message. </param>
             <param name="messageParts"> Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogWarning(System.String[])">
             <summary>
             Logs a warning message to the Console formed by joining the given text strings together.
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarningFormat(System.String,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarningFormat(UnityEngine.Object,System.String,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarningFormat(System.Int32,UnityEngine.Object,System.String,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarningFormat(System.Int32,System.Int32,UnityEngine.Object,System.String,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogWarningFormat(System.Int32,System.Int32,System.String,System.Object[])-->
        <member name="M:Sisus.Debugging.Debug.LogWarningLarge(System.String,UnityEngine.Object)">
            @}
            
            
                 * @name Log Warning Large - Logs a warning message to the Console using a large font size
                 @{
             <summary>
             Logs a warning <paramref name="message" /> to the Console using a large font size.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.String)">
            @}
            
            
                 * @name Log Error - Logs an error message to the Console
                 @{
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.String,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Object,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console on the given <paramref name="channel" />.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Int32,System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console on the given channels.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Object,System.Object,System.Object[])">
             <summary>
             Logs an error to the Console listing a number of elements separated by a separator character.
             <para>
             With shorter messages a comma will be used for the separator character, and with longer message a line break will be used.
             </para>
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.String,System.Object,System.Object[])">
             <summary>
             Logs an error to the Console starting with <paramref name="prefix" /> and followed
             by a list of elements separated by a separator character.
             <para>
             Comma will be used for the separator character with short messages and line break with longer messages.
             </para>
             <example>
             <code>
             public void TestLogError123()
             {
            		Debug.LogError("Test: ", 1, 2, 3);
            	}
             </code>
             </example>
             </summary>
             <param name="prefix"> Prefix text for the message. </param>
             <param name="arg"> First listed element after the prefix. </param>
             <param name="args"> (Optional) Additional listed elements after the prefix. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(UnityEngine.Object,System.String,System.String,System.String[])">
             <summary>
             Logs an error message to the Console consisting of multiple parts joined together.
             </summary>
             <param name="part1"> First part of the message. </param>
             <param name="part2"> Second part of the message. </param>
             <param name="parts"> (Optional) Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs an error message to the Console consisting of the name and value of one or more class members separated by a separator character.
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogError(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             </summary>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs an error message to the Console on the given <paramref name="channel" /> and consisting of the name and value of one or more class members separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogError(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> <see cref="!:Channel" /> to which the message belongs. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs an error message to the Console on the given channels and consisting of the name and value of
             <paramref name="classMembers">zero or more class members</paramref> separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogError(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> The first <see cref="!:Channel" /> to which the message belongs. </param>
             <param name="channel2"> The second <see cref="!:Channel" /> to which the message belongs. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs a warning message to the Console consisting of the name and value of <paramref name="classMember">a class member</paramref>.
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		Debug.LogError(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogError(System.String,System.Linq.Expressions.Expression{System.Func{System.Object}}[])-->
        <member name="M:Sisus.Debugging.Debug.LogError(System.String,System.String,System.String[])">
             <summary>
             Logs an error to the Console formed by joining the given text strings together.
             </summary>
             <param name="messagePart1"> First part of the message. </param>
             <param name="messagePart2"> Second part of the message. </param>
             <param name="messageParts"> Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogError(System.String[])">
             <summary>
             Logs an error to the Console formed by joining the given text strings together.
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogErrorFormat(System.String,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogErrorFormat(UnityEngine.Object,System.String,System.Object[])-->
        <member name="M:Sisus.Debugging.Debug.LogErrorLarge(System.String,UnityEngine.Object)">
            @}
            
            
                 * @name Log Error Large - Logs an error message to the Console using a large font size
                 @{
             <summary>
             Logs an error <paramref name="message" /> to the Console using a large font size.
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogException(System.Exception)">
            @}
            
            
                 * @name Log Exception - Logs an exception to the Console
                 @{
             <summary>
             Logs an <paramref name="exception" /> to the Console.
             </summary>
             <param name="exception"> Runtime exception to display. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogException(System.Exception,UnityEngine.Object)">
             <summary>
             Logs an <paramref name="exception" /> to the Console.
             </summary>
             <param name="exception"> Runtime exception to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogException(System.Int32,System.Exception,UnityEngine.Object)">
             <summary>
             Logs an <paramref name="exception" /> to the Console on the given <paramref name="channel" />.
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="exception"> Runtime exception to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogAssertion(System.Object,UnityEngine.Object)">
            @}
            
            
                 * @name Log Assertion - Logs an assertion message to the Console
                 @{
             <summary>
             Logs an <see cref="F:UnityEngine.LogType.Assert">assertion</see> <paramref name="message" /> to the Console.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.LogAssertionFormat(System.String,System.Object[])-->
        <member name="M:Sisus.Debugging.Debug.Assert(System.Int32,System.Boolean,UnityEngine.Object)">
            @}
            
            
                 * @name Assert - Logs an error to the Console if condition is not true
                 @{
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Int32,System.Int32,System.Boolean,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="channel1"> The first channel to which the message belongs if logged. </param>
             <param name="channel2"> The second channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>	
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Boolean,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Boolean,System.Object,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Int32,System.Boolean,System.Object,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>	
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Int32,System.Int32,System.Boolean,System.Object,UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="channel1"> The first channel to which the message belongs if logged. </param>
             <param name="channel2"> The second channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>	
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Linq.Expressions.Expression{System.Func{System.Boolean}},System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Logs an error message to the Console if expression does not return <see langword="true" />.
             <example>
             <code>
             public void Divide(int dividend, int divisor)
             {
             	Debug.Assert(()=&gt;divisor != 0, ()=&gt; Divide(dividend, divisor));
             	
            		return (float) dividend / divisor;
             }
             </code>
             </example>
             </summary>
             <param name="condition"> <see cref="T:System.Boolean">Boolean</see> expression you expect to return <see langword="true" />. For example a lambda expression. </param>
             <param name="contextMethod"> Expression pointing to a method to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Boolean,System.String,System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             public void DestroyAll(params Object[] targets)
             {
            		Debug.Assert(targets != null, "DestroyAll called with null params.", ()=&gt;Destroy(targets));
            		
            		foreach(var target in targets)
            		{
            			Debug.Assert(target != null, "DestroyAll called with a null target.", ()=&gt;Destroy(targets));
            			
            			Destroy(target);
            		}
            	}
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="message"> Message to display. </param>
             <param name="methodContext"> Expression pointing to a method to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Boolean,System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Logs an error message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             public void DestroyAll(params Object[] targets)
             {
            		Debug.Assert(targets != null, ()=&gt;Destroy(targets));
            		
            		foreach(var target in targets)
            		{
            			Debug.Assert(target != null, ()=&gt;Destroy(targets));
            			
            			Destroy(target);
            		}
            	}
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="methodContext"> Expression pointing to a method to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Object,System.Linq.Expressions.Expression{System.Func{System.Object}})">
             <summary>
             Logs an error message to the Console if <paramref name="classMember" /> value does not match <paramref name="expectedValue" />.
             <para>
             Note that this method work only if UNITY_ASSERTIONS symbol is defined, like for example in development builds.
             </para>
             <example>
             <code>
             int variable = 5;
             variable += 10;
             Debug.Assert(15, ()=&gt;variable);
             </code>
             </example>
             </summary>
             <param name="expectedValue"> Value you expect the class member to have. </param>
             <param name="classMember"> Expression pointing to the class member with the expected value. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Assert(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs an error message to the Console if <paramref name="classMember" /> value is not <see langword="true" />.
             <para>
             Class member can be of type <see cref="T:System.Boolean" /> or any type that implements <see cref="T:System.IConvertible" />.
             </para>
             <para>
             Class member can also be of type <see cref="T:UnityEngine.Object" /> or any other class type <see cref="T:System.Object" />
             in which case an error will be logged if its value is <see langword="null" />.
             </para>
             <para>
             Note that this method only works if UNITY_ASSERTIONS symbol is defined, like for example in development builds.
             </para>
             <example>
             <code>
             public int GetValue()
             {
            		bool valueFound = dictionary.TryGetValue(out int value);
            		Debug.Assert(()=&gt;valueFound);
            		return value;
             }
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to the class member with the expected value. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.AssertWarning(System.Boolean,UnityEngine.Object)">
            @}
            
            
                 * @name Assert Warning - Logs a warning to the Console if condition is not true
                 @{
             <summary>
             Logs a warning message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.AssertWarning(System.Boolean,System.Object,UnityEngine.Object)">
             <summary>
             Logs a warning message to the Console if <paramref name="condition" /> is not <see langword="true" />.
             <para>
             Calls to this method will be stripped from release builds unless the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Ensure(System.Boolean,UnityEngine.Object)">
            @}
            
            
                 * @name Ensure - Logs an error to the Console if condition is false and returns condition result
                 @{
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error message and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Ensure(System.Int32,System.Boolean,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given <paramref name="channel" />
             an error message and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             </summary>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Ensure(System.Int32,System.Int32,System.Boolean,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given channels
             an error message and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="channel1"> The first channel to which the message belongs if logged. </param>
             <param name="channel2"> The second channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Ensure(System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error <paramref name="message" /> and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="message"> Message to display if <paramref name="condition" /> is <see langword="false" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Ensure(System.Int32,System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given <paramref name="channel" />
             an error <paramref name="message" /> and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             This can be useful for checking that the arguments passed to a function are valid and only executing a block of code if so.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>	
             <param name="message"> Message to display if <paramref name="condition" /> is <see langword="false" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Int32,System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Int32,System.Int32,System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Boolean,System.String,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard``1(System.Boolean,System.Object[])-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Int32,System.Boolean,System.String,UnityEngine.Object)-->
        <member name="M:Sisus.Debugging.Debug.Guard(System.Int32,System.Boolean,System.String[])">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given <paramref name="channel" /> an error message
             formed by joining the given text strings together and returns <see langword="true" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="false" /> without logging anything.
             </para>
             <para>
             This can be useful for checking that the arguments passed to a function are valid and if not returning early with an error.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private void CopyComponent(Component component, GameObject to)
             {
            		if(Debug.Guard(component != null, Channel.Utils, nameof(CopyComponent), " called with null ", nameof(component), " argument.")
            			|| Debug.Guard(to != null, Channel.Utils, nameof(CopyComponent), " called with null ", nameof(to), " argument."))
            		{
            			return;
            		}
            		
            		var copy = to.AddComponent(component.GetType());
            		var json = JsonUtility.ToJson(component);
            		JsonUtility.FromJsonOverwrite(json, copy);
             }
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>	
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="false" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Guard(System.Boolean,System.String[])">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error message
             formed by joining the given text strings together and returns <see langword="true" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="false" /> without logging anything.
             </para>
             <para>
             This can be useful for checking that the arguments passed to a function are valid and if not returning early with an error.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private void CopyComponent(Component component, GameObject to)
             {
            		if(Debug.Guard(component != null, nameof(CopyComponent), " called with null ", nameof(component), " argument.")
            			|| Debug.Guard(to != null, nameof(CopyComponent), " called with null ", nameof(to), " argument."))
            		{
            			return;
            		}
            		
            		var copy = to.AddComponent(component.GetType());
            		var json = JsonUtility.ToJson(component);
            		JsonUtility.FromJsonOverwrite(json, copy);
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="false" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Guard(System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error message containing the name and value
             of <paramref name="classMember">class member</paramref> and returns <see langword="true" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="false" /> without logging anything.
             </para>
             <para>
             This can be useful for checking that the arguments passed to a function are valid and if not returning early with an error.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private void CopyComponent(Component component, GameObject to)
             {
            		if(Debug.Guard(component != null, ()=&gt;component) || Debug.Guard(to != null, ()=&gt;to))
            		{
            			return;
            		}
            		
            		var copy = to.AddComponent(component.GetType());
            		var json = JsonUtility.ToJson(component);
            		JsonUtility.FromJsonOverwrite(json, copy);
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="false" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.Guard(System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given <paramref name="channel" /> an error message
             containing the name and value of <paramref name="classMember">class member</paramref> and returns <see langword="true" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="false" /> without logging anything.
             </para>
             <para>
             This can be useful for checking that the arguments passed to a function are valid and if not returning early with an error.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             In release builds an error will only be logged if the UNITY_ASSERTIONS symbol is defined.
             </para>
             <example>
             <code>
             private void CopyComponent(Component component, GameObject to)
             {
            		if(Debug.Guard(component != null, Channel.Utils, ()=&gt;component) || Debug.Guard(to != null, Channel.Utils, ()=&gt;to))
            		{
            			return;
            		}
            		
            		var copy = to.AddComponent(component.GetType());
            		var json = JsonUtility.ToJson(component);
            		JsonUtility.FromJsonOverwrite(json, copy);
             }
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="false" />; otherwise, <see langword="false" />. </returns>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.Guard(System.Boolean,System.Linq.Expressions.Expression{System.Action})-->
        <member name="M:Sisus.Debugging.Debug.DisplayOnScreen(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            @}
            
            
                 * @name Display On Screen - Displays something on screen
                 @{
             <summary>
             Start displaying the name and value of the class member on screen.
             <para>
             Value will continue to be displayed until <see cref="M:Sisus.Debugging.Debug.CancelDisplayOnScreen(System.Linq.Expressions.Expression{System.Func{System.Object}})" /> is called with an
             expression pointing to the same class member.
             </para>
             </summary>
             <param name="classMember"> Expression pointing to the class member to display on screen. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DisplayOnScreen(System.Object,System.Reflection.MemberInfo)">
             <summary>
             Start displaying the name and value of the class member on screen.
             <para>
             Value will continue to be displayed until <see cref="M:Sisus.Debugging.Debug.CancelDisplayOnScreen(System.Linq.Expressions.Expression{System.Func{System.Object}})" /> is called with an
             expression pointing to the same class member.
             </para>
             </summary>
             <param name="trackMember"> Expression pointing to the class member to display on screen. </param>
             <param name="memberOwner">
             Instance of the class that contains the member and from which the value of the member is read.
             <para>
             This can be <see langword="null" /> if the <see cref="T:System.Reflection.MemberInfo" /> represents a static member.
             </para>
             </param>
             <param name="classMember">
             <see cref="T:System.Reflection.MemberInfo" /> representing the class member to display on screen.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelDisplayOnScreen(System.Linq.Expressions.Expression{System.Func{System.Object}})">
             <summary>
             Stop displaying the name and value of a class member on screen.
             </summary>
             <param name="classMember"> Expression pointing to a class member that is being displayed on screen. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelDisplayOnScreen(System.Reflection.MemberInfo)">
             <summary>
             Stop displaying the name and value of a class member on screen.
             </summary>
             <param name="classMember"> <see cref="T:System.Reflection.MemberInfo" /> representing a class member being displayed on screen. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DisplayButton(System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Start displaying a button on screen which calls a method when clicked.
             <para>
             Button will continue to be displayed until <see cref="M:Sisus.Debugging.Debug.CancelDisplayButton(System.Linq.Expressions.Expression{System.Action})" />
             is called with an expression pointing to the same method.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton(()=&gt;SayHello());
             }
             
             void SayHello()
             {
            		Debug.Log("Hello!");
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton(()=&gt;SayHello());
             }
             </code>
             </example>
             </summary>
             <param name="onClicked">
             Expression pointing to the method to call when the button is clicked.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DisplayButton(System.String,System.Action)">
             <summary>
             Start displaying a button on screen which calls a method when clicked.
             <para>
             Button will continue to be displayed until <see cref="M:Sisus.Debugging.Debug.CancelDisplayButton(System.String)" />
             is called with the same label.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton("Say Hello", ()=&gt;Debug.Log("Hello!"));
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton("Say Hello");
             }
             </code>
             </example>
             </summary>
             <param name="label"> Label to display on the button. </param>
             <param name="onClicked">
             Method to call when the button is clicked.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelDisplayButton(System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Stop displaying a button on screen.
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton(()=&gt;SayHello());
             }
             
             void SayHello()
             {
            		Debug.Log("Hello!");
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton(()=&gt;SayHello());
             }
             </code>
             </example>
             </summary>
             <param name="onClicked">
             Expression pointing to a method that is being displayed on screen as a button.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.CancelDisplayButton(System.String)">
             <summary>
             Stop displaying a button on screen.
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton("Say Hello", ()=&gt;Debug.Log("Hello!"));
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton("Say Hello");
             }
             </code>
             </example>
             </summary>
             <param name="label"> Label of a button that is being displayed on screen. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.ShowFps">
             <summary>
             Start displaying frame rate on screen.
             <para>
             Frame rate will continue to be displayed until <see cref="M:Sisus.Debugging.Debug.CancelShowFps" /> is called.
             </para>
             </summary>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Debug.CancelShowFps-->
        <member name="M:Sisus.Debugging.Debug.ClearDisplayedOnScreen">
             <summary>
             Clears the screen from all GUI elements that have been added to it using <see cref="M:Sisus.Debugging.Debug.DisplayOnScreen(System.Linq.Expressions.Expression{System.Func{System.Object}})" />.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.EnableChannel(System.String)">
            @}
            
            
                 * @name Channel - Control logging of messages on channels
                 @{
             <summary>
             Enables logging of messages on the given <paramref name="channel">channel</paramref>.
             </summary>
             <param name="channel"> Name of the channel to enable. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DisableChannel(System.String)">
             <summary>
             Disables logging of messages on the given <paramref name="channel">channel</paramref>.
             </summary>
             <param name="channel"> Name of the channel to disable. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.StartStopwatch">
            @}
            
            
                 * @name Stopwatch - Accurately measure elapsed time
                 @{
             <summary>
             Starts a new stopwatch counting upwards from zero.
             <para>
             The stopwatch will continue running until <see cref="M:Sisus.Debugging.Debug.FinishStopwatch" /> is called.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// Stopwatch 1 . . . 3.2 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch();
             	
             	SceneManager.LoadScene(sceneName);
             	
             	Debug.FinishStopwatch();
             }
             </code>
             </example>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.StartStopwatch(System.String)">
             <summary>
             Starts a new stopwatch counting upwards from zero with the given name.
             <para>
             The stopwatch will continue running until <see cref="M:Sisus.Debugging.Debug.FinishStopwatch(System.String)" /> is called with the same name.
             </para>
             <para>
             If a stopwatch by the same name already exists a warning will be logged and no new stopwatch will be started.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             
             	Debug.FinishStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="name"> The name for the stopwatch. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.StartSubStopwatch">
             <summary>
             Starts a new sub-stopwatch running under the stopwatch that was last started using <see cref="M:Sisus.Debugging.Debug.StartStopwatch" />.
             <para>
             The sub-stopwatch will continue running until <see cref="M:Sisus.Debugging.Debug.FinishSubStopwatch" /> is called.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// Stopwatch 1 . . . 0.001 s
            		//   Sub Stopwatch 1 . . . 0 s
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch();
             
            		SceneManager.LoadScene(sceneName);
             
             	Debug.StartSubStopwatch();
             
             	LoadSubscenes(sceneName);
             	
            		Debug.FinishSubStopwatch();
             
             	Debug.FinishStopwatch();
             }
             </code>
             </example>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.StartSubStopwatch(System.String)">
             <summary>
             Starts a new sub-stopwatch running under the stopwatch that was last started using <see cref="M:Sisus.Debugging.Debug.StartStopwatch" />.
             <para>
             The sub-stopwatch will continue running until <see cref="M:Sisus.Debugging.Debug.FinishSubStopwatch(System.String)" /> is called with the same name.
             </para>
             <para>
             If no stopwatches are currently running a warning will be logged and no sub-stopwatch will be started.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		//    Environment . . . 9.671 s
            		//       Terrain . . . 0.669 s
            		//       Trees . . . 1.999 s
            		//       Vegetation . . . 3 s
            		//    Actors . . . 5 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             	Load(LoadEnvironment);
             	Load(LoadActors);
             
             	Debug.FinishStopwatch();
             }
             
             void LoadEnvironment()
             {
             	Load(LoadTerrain);	
             	Load(LoadTrees);
             	Load(LoadVegetation);
             }
             
             void Load(Action operation)
             {
             	Debug.StartSubStopwatch(operation.Method.Name);
             
             	operation();
             
             	Debug.FinishSubStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="name"> The label for the timer. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.StartSubStopwatch(System.String,System.String)">
             <summary>
             Starts a new sub-stopwatch running under a parent stopwatch.
             If main stopwatch by provided name does not exist yet one will be created.
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		//    Environment . . . 9.671 s
            		//       Terrain . . . 0.669 s
            		//       Trees . . . 1.999 s
            		//       Vegetation . . . 3 s
            		//    Actors . . . 5 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             	Load(LoadEnvironment);
             	Load(LoadActors);
             
             	Debug.FinishStopwatch();
             }
             
             void LoadEnvironment()
             {
             	Load(LoadTerrain);	
             	Load(LoadTrees);
             	Load(LoadVegetation);
             }
             
             void Load(Action operation)
             {
             	Debug.StartSubStopwatch(operation.Method.Name);
             
             	operation();
             
             	Debug.FinishSubStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="parentName"> Name of parent stopwatch under which the sub-stopwatch will be nested. </param>
             <param name="name"> Name of new sub-stopwatch to start. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishSubStopwatch">
             <summary>
             Gets the last started stopwatch and finishes the sub-stopwatch inside it which was last started,
             still leaving the main stopwatch running.
             <para>
             Results are not logged at this point, only when you finish the main stopwatch.
             </para>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishSubStopwatch(System.String)">
             <summary>
             Finishes a previously created sub-stopwatch, still leaving the main stopwatch running.
             Results are not logged at this point, only when you finish the main stopwatch.
             </summary>
             <param name="parentName"> Name of parent stopwatch which contains the sub-stopwatch to stop. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishSubStopwatch(System.String,System.String)">
             <summary>
             Finishes a previously created sub-stopwatch, still leaving the main stopwatch running.
             Results are not logged at this point, only when you finish the main stopwatch.
             </summary>
             <param name="parentName"> Name of parent stopwatch which contains the sub-stopwatch to stop. </param>
             <param name="name"> Name of sub-stopwatch to stop. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishStopwatch">
             <summary>
             Logs results of the last created stopwatch and clears it.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishStopwatch(System.String)">
             <summary>
             Logs results of a previously created stopwatch and then clears it.
             </summary>
             <param name="name"> Name of stopwatch to stop. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.FinishAllStopwatches">
             <summary>
             Logs results of a all previously created stopwatches and the clears them.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.ShouldHideMessage(System.String)">
            @}
             <summary>
             If message contains any tags of channels that are enabled, returns false.
             Otherwise if message contains any tags of channels that are disabled, returns true.
             Otherwise returns false;
             </summary>
             <param name="message"> Message which might contain channel prefixes. </param>
             <returns> <see langword="true" /> if message should be hidden at this time, otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogHierarchyPath(UnityEngine.Transform)">
            
            
                 * @name Log Hierarchy Path - Logs the full hierarchy path of a scene object
                 @{
             <summary>
             <see cref="M:UnityEngine.Debug.Log(System.Object)">Logs</see> the full <see cref="M:Sisus.Debugging.DebugFormatter.GetFullHierarchyPath(UnityEngine.Transform)">hierarchy path</see> of the given <paramref name="transform" /> to the Console.
             </summary>
             <param name="transform"> The <see cref="T:UnityEngine.Transform" /> component of a <see cref="T:UnityEngine.GameObject" /> whose hierarchy path to log. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogHierarchyPath(UnityEngine.GameObject)">
             <summary>
             <see cref="M:UnityEngine.Debug.Log(System.Object)">Logs</see> the full <see cref="M:Sisus.Debugging.DebugFormatter.GetFullHierarchyPath(UnityEngine.Transform)">hierarchy path</see> of the given <paramref name="transform" /> to the Console.
             </summary>
             <param name="transform"> The <see cref="T:UnityEngine.GameObject" /> whose hierarchy path to log. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.LogInternal(System.String,UnityEngine.LogType,System.Int32,System.Int32,UnityEngine.Object,System.String)">
            @}
            </member>
        <member name="M:Sisus.Debugging.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
            
            
                 * @name Draw - Draws something on the screen
                 @{
             <summary>
             Draws a line between specified start and end points.
             <para>
             The line will be drawn in the Game view of the editor when the game is running and the gizmo drawing is enabled. The line will also be drawn in the Scene when it is visible in the Game view. Leave the game running and showing the line. Switch to the Scene view and the line will be visible.
             </para>
             <para>
             The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.
             </para>
             <para>
             Note: This is for debugging playmode only. Editor gizmos should be drawn with <see cref="M:UnityEngine.Gizmos.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)" /> or Handles.DrawLine instead.
             </para>
             <example>
             <code>
             using UnityEngine;
             using System.Collections;
             
             public class ExampleClass : MonoBehaviour
             {
            		public Transform target;
            		
            		void OnDrawGizmosSelected()
            		{
            			if (target != null)
            			{
            				// Draws a blue line from this transform to the target
            				Gizmos.color = Color.blue;
            				Gizmos.DrawLine(transform.position, target.position);
            			}
            		}
             }
             </code>
             </example>
             </summary>
             <param name="start"> Point in world space where the line should start. </param>
             <param name="end"> Point in world space where the line should end. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
             <summary>
             Draws a line between specified start and end points.
             <para>
             The line will be drawn in the Game view of the editor when the game is running and the gizmo drawing is enabled. The line will also be drawn in the Scene when it is visible in the Game view. Leave the game running and showing the line. Switch to the Scene view and the line will be visible.
             </para>
             <para>
             The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.
             </para>
             <para>
             Note: This is for debugging playmode only. Editor gizmos should be drawn with <see cref="M:UnityEngine.Gizmos.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)" /> or Handles.DrawLine instead.
             </para>
             <example>
             <code>
             using UnityEngine;
             using System.Collections;
             
             public class ExampleClass : MonoBehaviour
             {
            		public Transform target;
            		
            		void OnDrawGizmosSelected()
            		{
            			if (target != null)
            			{
            				// Draws a blue line from this transform to the target
            				Gizmos.color = Color.blue;
            				Gizmos.DrawLine(transform.position, target.position, Color.green);
            			}
            		}
             }
             </code>
             </example>
             </summary>
             <param name="start"> Point in world space where the line should start. </param>
             <param name="end"> Point in world space where the line should end. </param>
             <param name="color"> Color of the line. </param>
             <param name="duration"> How long the line should be visible for. </param>
             <param name="depthTest"> Should the line be obscured by objects closer to the camera? </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
             <summary>
             Draws a line from start to start + dir in world coordinates.
             <para>
             The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.
             </para>
             <para>
             If depthTest is set to true then the line will be obscured by other objects in the Scene that are nearer to the camera.
             </para>
             <para>The line will be drawn in the Scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.
             </para>
             <example>
             <code>
             using UnityEngine;
             
             public class Example : MonoBehaviour
             {
            		// Frame update example: Draws a 10 meter long green line from the position for 1 frame.
            		void Update()
            		{
            			Vector3 forward = transform.TransformDirection(Vector3.forward) * 10;
            			Debug.DrawRay(transform.position, forward);
            		}
             }
             </code>
             </example>
             </summary>
             <param name="start"> Point in world space where the ray should start. </param>
             <param name="dir"> Direction and length of the ray. </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
             <summary>
             Draws a line from start to start + dir in world coordinates.
             <para>
             The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.
             </para>
             <para>
             If depthTest is set to true then the line will be obscured by other objects in the Scene that are nearer to the camera.
             </para>
             <para>The line will be drawn in the Scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.
             </para>
             <example>
             <code>
             using UnityEngine;
             
             public class Example : MonoBehaviour
             {
            		// Frame update example: Draws a 10 meter long green line from the position for 1 frame.
            		void Update()
            		{
            			Vector3 forward = transform.TransformDirection(Vector3.forward) * 10;
            			Debug.DrawRay(transform.position, forward, Color.green);
            		}
             }
             </code>
             </example>
             </summary>
             <param name="start"> Point in world space where the ray should start. </param>
             <param name="dir"> Direction and length of the ray. </param>
             <param name="color"> Color of the drawn line. </param>
             <param name="duration"> How long the line will be visible for (in seconds). </param>
             <param name="depthTest"> Should the line be obscured by other objects closer to the camera? </param>
            </member>
        <member name="M:Sisus.Debugging.Debug.Break">
            @}
            
            
                 * @name Break
                 @{
             <summary>
             Pauses the editor.
             <para>
             This is useful when you want to check certain values on the inspector and you are not able to pause it manually.
             </para>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.ClearDeveloperConsole">
            @}
            
            
                 * @name Clear Console
                 @{
             <summary>
             Clears errors from the developer Console.
             <seealso cref="P:Sisus.Debugging.Debug.developerConsoleVisible" />
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Debug.ClearEditorConsole">
             <summary>
             Clears errors from the Console window in the editor.
             </summary>
            </member>
        <member name="T:Sisus.Debugging.DebugChannelInfo">
             <summary>
             Represents a channel on which Console messages can be logged.
             </summary>
            </member>
        <member name="F:Sisus.Debugging.DebugChannelInfo.id">
             <summary>
             The name that identifies the channel.
             </summary>
            </member>
        <member name="F:Sisus.Debugging.DebugChannelInfo.color">
             <summary>
             The color used for the channel prefix in the Console for messages logged on this channel.
             </summary>
            </member>
        <member name="F:Sisus.Debugging.DebugChannelInfo.enabledByDefault">
             <summary>
             Is this channel enabled for all users by default?
             <para>
             If <see langword="true" /> channel is enabled for all users unless they blacklist it.
             </para>
             <para>
             If <see langword="false" /> channel is disabled for all users unless they whitelist it.
             </para>
             </summary>
            </member>
        <member name="F:Sisus.Debugging.DebugChannelInfo.colorText">
             <summary>
             The color of the channel as a hexadecimal string in the format "RRGGBB" or an <see cref="F:System.String.Empty">empty string</see> if <see cref="P:Sisus.Debugging.DebugChannelInfo.HasColor" /> is <see langword="false" />.
             </summary>
            </member>
        <member name="P:Sisus.Debugging.DebugChannelInfo.HasColor">
             <summary>
             Does this channel have a non-white <see cref="F:Sisus.Debugging.DebugChannelInfo.color" />?
             <para>
             <see langword="true" /> if <see cref="F:Sisus.Debugging.DebugChannelInfo.color" /> equals <see cref="P:UnityEngine.Color.white" />; otherwise, <see langword="false" />.
             </para>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.DebugChannelInfo.OnValidate">
             <summary>
             This should be called during the OnValidate event for all <see cref="T:Sisus.Debugging.DebugChannelInfo" /> fields on a <see cref="T:UnityEngine.Object" />.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.DebugFormatter.ToStringColorized(System.Object,System.Text.StringBuilder,System.Boolean)">
             <summary>
             Appends value to StringBuilder with syntax formatting if DebugFormatter.colorize is true.
             </summary>
             <param name="value"> Value to append to StringBuilder. </param>
             <param name="formatStrings"> If value is string type, should it be placed inside quotation marks and colorized, or returned as it was? </param>
            </member>
        <member name="M:Sisus.Debugging.DebugFormatter.ToStringColorized(System.Object,System.Boolean)">
             <summary>
             Converts value to string and applies syntax formatting to it if DebugFormatter.colorize is true.
             </summary>
             <param name="value"> Value to convert to string. </param>
             <param name="formatStrings"> If value is string type, should it be placed inside quotation marks and colorized, or returned as it was? </param>
             <returns> Value as string and syntax formatting. </returns>
            </member>
        <member name="M:Sisus.Debugging.DebugFormatter.CleanUpStackTrace(System.String)">
             <summary>
             Cleans up the unnecessary clutter from stack trace by removing first row from it.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.DebugFormatter.GetFullHierarchyPath(UnityEngine.Transform)">
             <summary>
             Gets the full hierarchy path of the given <paramref name="transform" />.
             </summary>
             <param name="transform"> The <see cref="T:UnityEngine.Transform" /> component of a <see cref="T:UnityEngine.GameObject" /> whose hierarchy path to return. </param>
             <returns> <see cref="T:System.String" /> containing the <see cref="!:Transform.name">name</see> of the transform and all its <see cref="P:UnityEngine.Transform.parent">parents</see> separated by a '/' character. </returns>
            </member>
        <member name="T:Sisus.Debugging.Dev">
             <summary>
             Utility class containing Debugging methods similar to the <see cref="T:Sisus.Debugging.Debug" /> class, with the exception that
             all calls to its methods — including any calls made in their arguments — are completely omitted
             in release builds.
             </summary>
            </member>
        <!--FIXME: Invalid documentation markup was found for member P:Sisus.Debugging.Dev.PersonalChannelName-->
        <member name="M:Sisus.Debugging.Dev.Log(System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console on the given <paramref name="channel" />.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Dev.Log(Channel.Audio, "Playing {audioId} in {delay} seconds.", this);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Int32,System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console using the given channel.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <example>
             <code>
             public IEnumerator PlaySoundEffect(float delay, AudioId audioId)
             {
            		Dev.Log(Channel.Audio, Channel.Sfx, "Playing {audioId} in {delay} seconds.", this);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Int32,System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console using the given channel.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public void PlaySound(AudioId audioId)
             {
            		Dev.Log(Channel.Audio, audioId, this);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Int32,System.Int32,System.Object,UnityEngine.Object)">
             <summary>
             Logs a <paramref name="message" /> to the console using the given channel.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public void PlaySoundEffect(AudioId audioId)
             {
            		Dev.Log(Channel.Audio, Channel.Sfx, audioId, this);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             </summary>
             <param name="channel1"> First channel to which the message belongs. </param>
             <param name="channel2"> Second channel to which the message belongs. </param>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs to the Console the name and value of <paramref name="classMember">a class member</paramref>.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		
            		Dev.Log(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.String,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs a message to the Console consisting of a <paramref name="prefix">text string</paramref> followed by the names and values of
             <paramref name="classMembers">zero or more class members</paramref>.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Dev.Log("[Audio] Playing delayed - ", ()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(soundId);
            	}
             </code>
             </example>
             </summary>
             <param name="prefix"> Prefix text for the message. </param>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>	
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.String[])">
             <summary>
             Logs a message to the Console formed by joining the given text strings together.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Log(System.Object,System.Object,System.Object[])">
             <summary>
             Logs a message to the Console listing a number of elements separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list,
             and with longer message a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogWarning(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs a warning <paramref name="message" /> to the console using the given channel.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogWarning(System.String[])">
             <summary>
             Logs a warning to the Console formed by joining the given text strings together.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogWarning(System.String,System.String,System.String[])">
             <summary>
             Logs a warning to the Console formed by joining the given text strings together.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="messagePart1"> First part of the message. </param>
             <param name="messagePart2"> Second part of the message. </param>
             <param name="messageParts"> Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogWarning(System.Object,System.Object,System.Object[])">
             <summary>
             Logs a warning to the Console listing a number of elements separated by a separator character.
             <para>
             With shorter messages a comma will be used to separate elements in the list,
             and with longer message a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.String,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
             <summary>
             Logs an error message to the Console consisting of the name and value of one or more class members separated by a separator character.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public IEnumerator PlaySound(float delay, AudioId audioId)
             {
            		Debug.LogError(()=&gt;delay, ()=&gt;audioId);
            		
            		yield return new WaitForSeconds(delay);
            		
            		audioController.Play(audioId);
            	}
             </code>
             </example>
             <para>
             With shorter messages a comma will be used to separate elements in the list, and with longer message a line break will be used.
             </para>
             </summary>
             <param name="classMembers"> Expressions pointing to class members whose names and values will be included in the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.Int32,System.String,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the console using the given channel.
             <para>
             Channels can be used to selectively suppress messages you don't care about at the moment.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.String[])">
             <summary>
             Logs an error to the Console formed by joining the given text strings together.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="messageParts"> <see cref="T:System.String">strings</see> to join together to form the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.String,System.String,System.String[])">
             <summary>
             Logs an error to the Console formed by joining the given text strings together.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="messagePart1"> First part of the message. </param>
             <param name="messagePart2"> Second part of the message. </param>
             <param name="messageParts"> Additional parts of the message. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.Object,System.Object,System.Object[])">
             <summary>
             Logs an error to the Console listing a number of elements separated by a separator character.
             <para>
             With shorter messages a comma will be used for the separator character,
             and with longer message a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="arg1"> First listed element. </param>
             <param name="arg2"> Second listed element. </param>
             <param name="args"> (Optional) Additional listed elements. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.Object,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="message"> <see cref="T:System.String" /> or <see cref="T:System.Object" /> to be converted to string representation for display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.String,UnityEngine.Object)">
             <summary>
             Logs an error <paramref name="message" /> to the Console.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="message"> Message to display. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogError(System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             Logs a warning message to the Console consisting of the name and value of <paramref name="classMember">a class member</paramref>.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             public void SetActivePage(Page value)
             {
            		activePage = value;
            		Debug.LogError(()=&gt;activePage, this);
            	}
             </code>
             </example>
             </summary>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogException(System.Exception)">
             <summary>
             Logs an <paramref name="exception" /> to the Console.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="exception"> Runtime exception to display. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogFormat``1(UnityEngine.LogType,``0,UnityEngine.Object,System.String,System.Object[])">
             <summary>
             Logs a message to the Console formed by inserting the values of <paramref name="args">zero or more objects</paramref> into a <paramref name="format">text string</paramref>.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="logType"> Type of the message; Log, Warning, Error, Assert or Exception. </param>
             <param name="logOptions"> Option flags for specifying special treatment of a log message. </param>
             <param name="context">
             <see cref="T:UnityEngine.Object" /> to which the message applies.
             <para>
             If you pass a context argument that <see cref="T:UnityEngine.Object" /> will be momentarily highlighted in the Hierarchy window when you click the log message in the Console.
             </para>
             </param>
             <param name="format">
             A composite format string based on which the message is generated.
             <para>
             Each format item inside the string is replaced by the value of the argument at the same index.
             </para>
             <para>
             A format item consists of braces ("{" and "}") containing the index of the argument whose value should be inserted into the <paramref name="format" /> string at that location.
             </para>
             </param>
             <param name="args">
             Zero or more objects to be converted to string and inserted into the <paramref name="format">composite format string</paramref>.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogIf(System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs a <paramref name="message" /> to the console.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogIf(System.Int32,System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs to the Console on the given <paramref name="channel" />
             a <paramref name="message" />.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="message"> Message to display. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogIf(System.Int32,System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}},UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="true" /> logs to the Console on the given <paramref name="channel" />
             the name and value of <paramref name="classMember">a class member</paramref>.
             <para>
             If <paramref name="condition" /> is <see langword="false" /> does nothing.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="condition"> Condition that must be <see langword="true" /> for logging to take place. </param>
             <param name="channel"> The channel to which the message belongs. </param>
             <param name="classMember"> Expression pointing to a class member whose name and value will be logged. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the message applies. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.Ensure(System.Boolean,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error message and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             An error will also only be logged in builds if the DEBUG symbol is defined, like for example in development builds.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Dev.Ensure(System.Boolean,System.String,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console an error <paramref name="message" /> and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             An error will also only be logged in builds if the DEBUG symbol is defined, like for example in development builds.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="message"> Message to display if <paramref name="condition" /> is <see langword="false" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <member name="M:Sisus.Debugging.Dev.Ensure(System.Int32,System.Boolean,UnityEngine.Object)">
             <summary>
             If <paramref name="condition" /> is <see langword="false" /> logs to the Console on the given <paramref name="channel" />
             an error message and returns <see langword="false" />.
             <para>
             If condition is <see langword="true" /> returns <see langword="true" /> without logging anything.
             </para>
             <para>
             An error is only logged the first time during a session that the <paramref name="condition" /> evaluates to <see langword="false" /> to avoid flooding the log file.
             </para>
             <para>
             An error will also only be logged in builds if the DEBUG symbol is defined, like for example in development builds.
             </para>
             <example>
             <code>
             private float Divide(float dividend, float divisor)
             {
            		return Debug.Ensure(divisor != 0f) ? dividend / divisor : 0f;
             }
             </code>
             </example>
             </summary>
             <param name="channel"> The channel to which the message belongs if logged. </param>
             <param name="condition"> Condition you expect to be <see langword="true" />. </param>
             <param name="context"> <see cref="T:UnityEngine.Object" /> to which the assertion applies. </param>
             <returns> <see langword="true" /> if <paramref name="condition" /> was <see langword="true" />; otherwise, <see langword="false" />. </returns>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Dev.Guard(System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Dev.Guard(System.Int32,System.Boolean,UnityEngine.Object)-->
        <!--FIXME: Invalid documentation markup was found for member M:Sisus.Debugging.Dev.Guard``1(System.Boolean,System.Object[])-->
        <member name="M:Sisus.Debugging.Dev.LogState(System.Object,System.Reflection.BindingFlags)">
             <summary>
             Logs to the Console the name and value of every field and property of <paramref name="target" /> matched using the specified <paramref name="flags" />.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="target"> <see cref="T:System.Object" /> instance whose class members are to be listed. </param>
             <param name="flags">
             <see cref="T:System.Reflection.BindingFlags" /> used when searching for the members.
             <para>
             By default only public and non-inherited instance members are listed.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogState(System.Object,System.Boolean,System.Boolean)">
             <summary>
             Logs to the Console the name and value of every field and property of <paramref name="target" /> matched using the specified settings.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="target"> <see cref="T:System.Object" /> instance whose members are to be listed. </param>
             <param name="includePrivate"> If <see langword="false" /> then only public members will be listed; otherwise, non-public members will also be listed. </param>
             <param name="includeStatic"> If <see langword="false" /> then only instance members will be listed; otherwise, static members will also be listed. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogState(System.Type,System.Reflection.BindingFlags)">
             <summary>
             Logs to the Console the name and value of every static field and property of <paramref name="classType" /> matched using the specified <paramref name="flags" />.
             <para>
             With a small number of listed members a comma will be used to separate them, and with a larger number of members a line break will be used.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="classType"> <see cref="T:System.Type" /> of the class whose members are to be listed. </param>
             <param name="flags">
             <see cref="T:System.Reflection.BindingFlags" /> used when searching for the members.
             <para>
             By default only public and non-inherited static members are listed.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.LogChanges(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
             <summary>
             Logs to the Console the name and value of <paramref name="classMember" /> any time its value is changed.
             <para>
             This will continue happening until <see cref="!:CancelLogChanges(MemberInfo)" /> is called with an
             expression pointing to the same class member.
             </para>
             <para>
             At runtime logging takes place at the end of each frame.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
             <param name="classMember"> Expression pointing to the class member to track. </param>
             <param name="pauseOnChanged"> If <see langword="true" />
             then the editor will be paused whenever the value of the class member changes; otherwise, editor will not be paused.
             <para>
             In builds this parameter will have no effect; the application will not be paused regardless of its value.
             </para>
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.DisplayButton(System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Start displaying a button on screen which calls a method when clicked.
             <para>
             Button will continue to be displayed until <see cref="M:Sisus.Debugging.Dev.CancelDisplayButton(System.Linq.Expressions.Expression{System.Action})" />
             is called with an expression pointing to the same method.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton(()=&gt;SayHello());
             }
             
             void SayHello()
             {
            		Debug.Log("Hello!");
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton(()=&gt;SayHello());
             }
             </code>
             </example>
             </summary>
             <param name="onClicked">
             Expression pointing to the method to call when the button is clicked.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.DisplayButton(System.String,System.Action)">
             <summary>
             Start displaying a button on screen which calls a method when clicked.
             <para>
             Button will continue to be displayed until <see cref="M:Sisus.Debugging.Dev.CancelDisplayButton(System.String)" />
             is called with the same label.
             </para>
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton("Say Hello", ()=&gt;Debug.Log("Hello!"));
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton("Say Hello");
             }
             </code>
             </example>
             </summary>
             <param name="label"> Label to display on the button. </param>
             <param name="onClicked">
             Method to call when the button is clicked.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.CancelDisplayButton(System.Linq.Expressions.Expression{System.Action})">
             <summary>
             Stop displaying a button on screen.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton(()=&gt;SayHello());
             }
             
             void SayHello()
             {
            		Debug.Log("Hello!");
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton(()=&gt;SayHello());
             }
             </code>
             </example>
             </summary>
             <param name="onClicked">
             Expression pointing to a method that is being displayed on screen as a button.
             </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.CancelDisplayButton(System.String)">
             <summary>
             Stop displaying a button on screen.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             <example>
             <code>
             void OnEnable()
             {
            		Debug.DisplayButton("Say Hello", ()=&gt;Debug.Log("Hello!"));
             }
             
             void OnDisable()
             {
            		Debug.CancelDisplayButton("Say Hello");
             }
             </code>
             </example>
             </summary>
             <param name="label"> Label of a button that is being displayed on screen. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.StartStopwatch">
             <summary>
             Starts a new stopwatch counting upwards from zero with the given label.
             <para>
             Calls to this method will be fully stripped from release builds.
             </para>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Dev.StartStopwatch(System.String)">
             <summary>
             Starts a new stopwatch counting upwards from zero with the given name.
             <para>
             The stopwatch will continue running until <see cref="M:Sisus.Debugging.Dev.FinishStopwatch(System.String)" /> is called with the same name.
             </para>
             <para>
             If a stopwatch by the same name already exists a warning will be logged and no new stopwatch will be started.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             
             	Debug.FinishStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="name"> The name for the stopwatch. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.StartSubStopwatch(System.String)">
             <summary>
             Starts a new sub-stopwatch running under the stopwatch that was last started using <see cref="M:Sisus.Debugging.Dev.StartStopwatch" />.
             <para>
             The sub-stopwatch will continue running until <see cref="M:Sisus.Debugging.Dev.FinishSubStopwatch(System.String)" /> is called with the same name.
             </para>
             <para>
             If no stopwatches are currently running a warning will be logged and no sub-stopwatch will be started.
             </para>
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		//    Environment . . . 9.671 s
            		//       Terrain . . . 0.669 s
            		//       Trees . . . 1.999 s
            		//       Vegetation . . . 3 s
            		//    Actors . . . 5 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             	Load(LoadEnvironment);
             	Load(LoadActors);
             
             	Debug.FinishStopwatch();
             }
             
             void LoadEnvironment()
             {
             	Load(LoadTerrain);	
             	Load(LoadTrees);
             	Load(LoadVegetation);
             }
             
             void Load(Action operation)
             {
             	Debug.StartSubStopwatch(operation.Method.Name);
             
             	operation();
             
             	Debug.FinishSubStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="name"> The label for the timer. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.StartSubStopwatch(System.String,System.String)">
             <summary>
             Starts a new sub-stopwatch running under a parent stopwatch.
             If main stopwatch by provided name does not exist yet one will be created.
             <example>
             <code>
             void Start()
             {
            		// Prints:
            		// LoadLevel : Test . . . 14.672 s
            		//    Environment . . . 9.671 s
            		//       Terrain . . . 0.669 s
            		//       Trees . . . 1.999 s
            		//       Vegetation . . . 3 s
            		//    Actors . . . 5 s
            		LoadLevel("Test");
             }
             
             void LoadLevel(string sceneName)
             {
             	Debug.StartStopwatch($"{nameof(LoadLevel)} : {sceneName}");
             
             	SceneManager.LoadScene(sceneName);
             	Load(LoadEnvironment);
             	Load(LoadActors);
             
             	Debug.FinishStopwatch();
             }
             
             void LoadEnvironment()
             {
             	Load(LoadTerrain);	
             	Load(LoadTrees);
             	Load(LoadVegetation);
             }
             
             void Load(Action operation)
             {
             	Debug.StartSubStopwatch(operation.Method.Name);
             
             	operation();
             
             	Debug.FinishSubStopwatch();
             }
             </code>
             </example>
             </summary>
             <param name="parentName"> Name of parent stopwatch under which the sub-stopwatch will be nested. </param>
             <param name="name"> Name of new sub-stopwatch to start. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.FinishSubStopwatch">
             <summary>
             Gets the last started stopwatch and finishes the sub-stopwatch inside it which was last started,
             still leaving the main stopwatch running.
             <para>
             Results are not logged at this point, only when you finish the main stopwatch.
             </para>
             </summary>
            </member>
        <member name="M:Sisus.Debugging.Dev.FinishSubStopwatch(System.String)">
             <summary>
             Finishes a previously created sub-stopwatch, still leaving the main stopwatch running.
             Results are not logged at this point, only when you finish the main stopwatch.
             </summary>
             <param name="mainStopwatchName"> Name of main stopwatch. </param>
            </member>
        <member name="M:Sisus.Debugging.Dev.FinishStopwatch">
             Logs results of a previously created stopwatch and then clears it.
            </member>
        <member name="M:Sisus.Debugging.Dev.FinishStopwatch(System.String)">
             Logs results of a previously created stopwatch and then clears it.
            </member>
        <member name="M:Sisus.Debugging.Dev.FinishAllStopwatches">
             Logs results of a all previously created stopwatches and the clears them.
            </member>
        <member name="T:Sisus.Debugging.DevCritical">
             <summary>
             Utility class containing Debugging methods similar to the <see cref="T:Sisus.Debugging.Debug" /> class, with four main differences:
             1. The messages use a larger font in the console window.
             2. They always include stack trace even if they have been disabled for normal messages in Player Settings.
             3. All calls to its methods — including any calls made in their arguments — are completely omitted
             in release builds.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.DevCritical.LogCriticalToFile(System.String,System.String)">
             <summary>
             Logs critical message to Player.log file with CRITICAL!!! prefix and with stack trace included.
             </summary>
            </member>
        <member name="F:Sisus.Debugging.RuntimeDebugger.onGUIOpened">
             <summary>
             Called whenever the GUI is opened due to user input.
             </summary>
            </member>
        <member name="F:Sisus.Debugging.RuntimeDebugger.onGUIClosed">
             <summary>
             Called whenever the GUI is closed due to user input.
             </summary>
            </member>
        <member name="P:Sisus.Debugging.RuntimeDebugger.Enabled">
             <summary>
             Returns value determining whether or not RuntimeDebugger is currently active.
             </summary>
            </member>
        <member name="M:Sisus.Debugging.ValueTracker.Update">
             <summary>
             This should be called during every Update, LateUpdate or a comparable event function.
             <para>
             Logs a message to the console if the value tracked member has changed since last update.
             </para>
             </summary>
            </member>
    </members>
</doc>
